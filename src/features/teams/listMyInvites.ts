import { supabase } from '@/lib/supabase'

export type MyInviteRow = {
  id: string
  team_id: string
  invited_email: string
  status: 'pending' | 'accepted' | 'rejected' | 'expired'
  created_at: string
  team?: { id: string; name: string | null } | null // Îã®Ïùº Í∞ùÏ≤¥Î°ú ÏÇ¨Ïö©
}

/**
 * ÎÇ¥ Ïù¥Î©îÏùºÎ°ú Î∞õÏùÄ ÌåÄ Ï¥àÎåÄ Î™©Î°ù
 * @param userEmail ÌòÑÏû¨ Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê Ïù¥Î©îÏùº (Í∂åÏû•: useAuth().user.email Ï†ÑÎã¨)
 */
export async function listMyInvites(userEmail: string) {
  const { data, error } = await supabase
    .from('team_invitations')
    // üîë aliasÎ•º team:teams Î°ú Î∞îÍøî Îã®Ïùº Í∞ùÏ≤¥Î•º Í∏∞ÎåÄ
    .select('id, team_id, invited_email, status, created_at, team:teams(id, name)')
    .eq('invited_email', userEmail)
    .order('created_at', { ascending: false })

  if (error) throw error

  // üîß ÎìúÎùºÏù¥Î≤Ñ/Î©îÌÉÄ ÏÉÅÌô©Ïóê Îî∞Îùº Î∞∞Ïó¥Î°ú Ïò¨ Ïàò ÏûàÏñ¥ Î∞©Ïñ¥Ï†ÅÏúºÎ°ú ÌèâÌÉÑÌôî
  const normalized = (data ?? []).map((r: any) => ({
    ...r,
    team: Array.isArray(r.team) ? (r.team[0] ?? null) : (r.team ?? null),
  }))

  // TS2352 Î∞©ÏßÄ: unknown Í±∞Ï≥ê Îã®Ïñ∏
  return normalized as unknown as MyInviteRow[]
}
